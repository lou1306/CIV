//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HmlLexer.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CIV.Hml {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class HmlLexer : Lexer {
	public const int
		TERM=1, TRUE=2, FALSE=3, AND=4, OR=5, NOT=6, LPAREN=7, RPAREN=8, LBOX=9, 
		RBOX=10, LWBOX=11, RWBOX=12, LDIAMOND=13, RDIAMOND=14, LWDIAMOND=15, RWDIAMOND=16, 
		ALL=17, COMMA=18, TAU=19, COACTION=20, ACTION=21, WHITESPACE=22;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TERM", "TRUE", "FALSE", "AND", "OR", "NOT", "LPAREN", "RPAREN", "LBOX", 
		"RBOX", "LWBOX", "RWBOX", "LDIAMOND", "RDIAMOND", "LWDIAMOND", "RWDIAMOND", 
		"ALL", "COMMA", "TAU", "COACTION", "ACTION", "WHITESPACE"
	};


	public HmlLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'tt'", "'ff'", "'and'", "'or'", "'not'", "'('", "')'", "'['", 
		"']'", "'[['", "']]'", "'<'", "'>'", "'<<'", "'>>'", "'-'", "','", "'tau'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TERM", "TRUE", "FALSE", "AND", "OR", "NOT", "LPAREN", "RPAREN", 
		"LBOX", "RBOX", "LWBOX", "RWBOX", "LDIAMOND", "RDIAMOND", "LWDIAMOND", 
		"RWDIAMOND", "ALL", "COMMA", "TAU", "COACTION", "ACTION", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HmlLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x18x\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b"+
		"\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE"+
		"\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3"+
		"\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a"+
		"\x15\x66\n\x15\f\x15\xE\x15i\v\x15\x3\x16\x3\x16\a\x16m\n\x16\f\x16\xE"+
		"\x16p\v\x16\x3\x17\x6\x17s\n\x17\r\x17\xE\x17t\x3\x17\x3\x17\x2\x2\x2"+
		"\x18\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n"+
		"\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11"+
		"!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18\x3\x2\x5\x3"+
		"\x2\x63|\x5\x2\x32;\x43\\\x63|\x5\x2\v\f\xF\xF\"\"z\x2\x3\x3\x2\x2\x2"+
		"\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2"+
		"\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2"+
		"\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3"+
		"\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3"+
		"\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2"+
		"\x2\x2-\x3\x2\x2\x2\x3/\x3\x2\x2\x2\x5\x31\x3\x2\x2\x2\a\x34\x3\x2\x2"+
		"\x2\t\x37\x3\x2\x2\x2\v;\x3\x2\x2\x2\r>\x3\x2\x2\x2\xF\x42\x3\x2\x2\x2"+
		"\x11\x44\x3\x2\x2\x2\x13\x46\x3\x2\x2\x2\x15H\x3\x2\x2\x2\x17J\x3\x2\x2"+
		"\x2\x19M\x3\x2\x2\x2\x1BP\x3\x2\x2\x2\x1DR\x3\x2\x2\x2\x1FT\x3\x2\x2\x2"+
		"!W\x3\x2\x2\x2#Z\x3\x2\x2\x2%\\\x3\x2\x2\x2\'^\x3\x2\x2\x2)\x62\x3\x2"+
		"\x2\x2+j\x3\x2\x2\x2-r\x3\x2\x2\x2/\x30\a=\x2\x2\x30\x4\x3\x2\x2\x2\x31"+
		"\x32\av\x2\x2\x32\x33\av\x2\x2\x33\x6\x3\x2\x2\x2\x34\x35\ah\x2\x2\x35"+
		"\x36\ah\x2\x2\x36\b\x3\x2\x2\x2\x37\x38\a\x63\x2\x2\x38\x39\ap\x2\x2\x39"+
		":\a\x66\x2\x2:\n\x3\x2\x2\x2;<\aq\x2\x2<=\at\x2\x2=\f\x3\x2\x2\x2>?\a"+
		"p\x2\x2?@\aq\x2\x2@\x41\av\x2\x2\x41\xE\x3\x2\x2\x2\x42\x43\a*\x2\x2\x43"+
		"\x10\x3\x2\x2\x2\x44\x45\a+\x2\x2\x45\x12\x3\x2\x2\x2\x46G\a]\x2\x2G\x14"+
		"\x3\x2\x2\x2HI\a_\x2\x2I\x16\x3\x2\x2\x2JK\a]\x2\x2KL\a]\x2\x2L\x18\x3"+
		"\x2\x2\x2MN\a_\x2\x2NO\a_\x2\x2O\x1A\x3\x2\x2\x2PQ\a>\x2\x2Q\x1C\x3\x2"+
		"\x2\x2RS\a@\x2\x2S\x1E\x3\x2\x2\x2TU\a>\x2\x2UV\a>\x2\x2V \x3\x2\x2\x2"+
		"WX\a@\x2\x2XY\a@\x2\x2Y\"\x3\x2\x2\x2Z[\a/\x2\x2[$\x3\x2\x2\x2\\]\a.\x2"+
		"\x2]&\x3\x2\x2\x2^_\av\x2\x2_`\a\x63\x2\x2`\x61\aw\x2\x2\x61(\x3\x2\x2"+
		"\x2\x62\x63\a)\x2\x2\x63g\t\x2\x2\x2\x64\x66\t\x3\x2\x2\x65\x64\x3\x2"+
		"\x2\x2\x66i\x3\x2\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2h*\x3\x2\x2\x2i"+
		"g\x3\x2\x2\x2jn\t\x2\x2\x2km\t\x3\x2\x2lk\x3\x2\x2\x2mp\x3\x2\x2\x2nl"+
		"\x3\x2\x2\x2no\x3\x2\x2\x2o,\x3\x2\x2\x2pn\x3\x2\x2\x2qs\t\x4\x2\x2rq"+
		"\x3\x2\x2\x2st\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2uv\x3\x2\x2\x2v"+
		"w\b\x17\x2\x2w.\x3\x2\x2\x2\x6\x2gnt\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CIV.Hml
