//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HmlLexer.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace CIV.Hml {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class HmlLexer : Lexer {
	public const int
		TERM=1, TRUE=2, FALSE=3, AND=4, OR=5, NOT=6, LPAREN=7, RPAREN=8, LBOX=9, 
		RBOX=10, LWBOX=11, RWBOX=12, LDIAMOND=13, RDIAMOND=14, LWDIAMOND=15, RWDIAMOND=16, 
		ALL=17, COMMA=18, TAU=19, COACTION=20, ACTION=21, MAXFP=22, MINFP=23, 
		WHITESPACE=24, IDENTIFIER=25;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"TERM", "TRUE", "FALSE", "AND", "OR", "NOT", "LPAREN", "RPAREN", "LBOX", 
		"RBOX", "LWBOX", "RWBOX", "LDIAMOND", "RDIAMOND", "LWDIAMOND", "RWDIAMOND", 
		"ALL", "COMMA", "TAU", "COACTION", "ACTION", "MAXFP", "MINFP", "WHITESPACE", 
		"IDENTIFIER"
	};


	public HmlLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'tt'", "'ff'", "'and'", "'or'", "'not'", "'('", "')'", "'['", 
		"']'", "'[['", "']]'", "'<'", "'>'", "'<<'", "'>>'", "'-'", "','", "'tau'", 
		null, null, "'max='", "'min='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TERM", "TRUE", "FALSE", "AND", "OR", "NOT", "LPAREN", "RPAREN", 
		"LBOX", "RBOX", "LWBOX", "RWBOX", "LDIAMOND", "RDIAMOND", "LWDIAMOND", 
		"RWDIAMOND", "ALL", "COMMA", "TAU", "COACTION", "ACTION", "MAXFP", "MINFP", 
		"WHITESPACE", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HmlLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1B\x8F\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3"+
		"\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15l\n\x15\f\x15\xE\x15"+
		"o\v\x15\x3\x16\x3\x16\a\x16s\n\x16\f\x16\xE\x16v\v\x16\x3\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x6\x19\x83"+
		"\n\x19\r\x19\xE\x19\x84\x3\x19\x3\x19\x3\x1A\x3\x1A\a\x1A\x8B\n\x1A\f"+
		"\x1A\xE\x1A\x8E\v\x1A\x2\x2\x2\x1B\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v"+
		"\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B"+
		"\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16"+
		"+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x3\x2\x6\x3\x2\x63|\x5"+
		"\x2\x32;\x43\\\x63|\x5\x2\v\f\xF\xF\"\"\x3\x2\x43\\\x92\x2\x3\x3\x2\x2"+
		"\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2"+
		"\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2"+
		"\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B"+
		"\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2"+
		"#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3"+
		"\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3"+
		"\x2\x2\x2\x3\x35\x3\x2\x2\x2\x5\x37\x3\x2\x2\x2\a:\x3\x2\x2\x2\t=\x3\x2"+
		"\x2\x2\v\x41\x3\x2\x2\x2\r\x44\x3\x2\x2\x2\xFH\x3\x2\x2\x2\x11J\x3\x2"+
		"\x2\x2\x13L\x3\x2\x2\x2\x15N\x3\x2\x2\x2\x17P\x3\x2\x2\x2\x19S\x3\x2\x2"+
		"\x2\x1BV\x3\x2\x2\x2\x1DX\x3\x2\x2\x2\x1FZ\x3\x2\x2\x2!]\x3\x2\x2\x2#"+
		"`\x3\x2\x2\x2%\x62\x3\x2\x2\x2\'\x64\x3\x2\x2\x2)h\x3\x2\x2\x2+p\x3\x2"+
		"\x2\x2-w\x3\x2\x2\x2/|\x3\x2\x2\x2\x31\x82\x3\x2\x2\x2\x33\x88\x3\x2\x2"+
		"\x2\x35\x36\a=\x2\x2\x36\x4\x3\x2\x2\x2\x37\x38\av\x2\x2\x38\x39\av\x2"+
		"\x2\x39\x6\x3\x2\x2\x2:;\ah\x2\x2;<\ah\x2\x2<\b\x3\x2\x2\x2=>\a\x63\x2"+
		"\x2>?\ap\x2\x2?@\a\x66\x2\x2@\n\x3\x2\x2\x2\x41\x42\aq\x2\x2\x42\x43\a"+
		"t\x2\x2\x43\f\x3\x2\x2\x2\x44\x45\ap\x2\x2\x45\x46\aq\x2\x2\x46G\av\x2"+
		"\x2G\xE\x3\x2\x2\x2HI\a*\x2\x2I\x10\x3\x2\x2\x2JK\a+\x2\x2K\x12\x3\x2"+
		"\x2\x2LM\a]\x2\x2M\x14\x3\x2\x2\x2NO\a_\x2\x2O\x16\x3\x2\x2\x2PQ\a]\x2"+
		"\x2QR\a]\x2\x2R\x18\x3\x2\x2\x2ST\a_\x2\x2TU\a_\x2\x2U\x1A\x3\x2\x2\x2"+
		"VW\a>\x2\x2W\x1C\x3\x2\x2\x2XY\a@\x2\x2Y\x1E\x3\x2\x2\x2Z[\a>\x2\x2[\\"+
		"\a>\x2\x2\\ \x3\x2\x2\x2]^\a@\x2\x2^_\a@\x2\x2_\"\x3\x2\x2\x2`\x61\a/"+
		"\x2\x2\x61$\x3\x2\x2\x2\x62\x63\a.\x2\x2\x63&\x3\x2\x2\x2\x64\x65\av\x2"+
		"\x2\x65\x66\a\x63\x2\x2\x66g\aw\x2\x2g(\x3\x2\x2\x2hi\a)\x2\x2im\t\x2"+
		"\x2\x2jl\t\x3\x2\x2kj\x3\x2\x2\x2lo\x3\x2\x2\x2mk\x3\x2\x2\x2mn\x3\x2"+
		"\x2\x2n*\x3\x2\x2\x2om\x3\x2\x2\x2pt\t\x2\x2\x2qs\t\x3\x2\x2rq\x3\x2\x2"+
		"\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2u,\x3\x2\x2\x2vt\x3\x2\x2"+
		"\x2wx\ao\x2\x2xy\a\x63\x2\x2yz\az\x2\x2z{\a?\x2\x2{.\x3\x2\x2\x2|}\ao"+
		"\x2\x2}~\ak\x2\x2~\x7F\ap\x2\x2\x7F\x80\a?\x2\x2\x80\x30\x3\x2\x2\x2\x81"+
		"\x83\t\x4\x2\x2\x82\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x82\x3\x2"+
		"\x2\x2\x84\x85\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x87\b\x19\x2\x2\x87"+
		"\x32\x3\x2\x2\x2\x88\x8C\t\x5\x2\x2\x89\x8B\t\x3\x2\x2\x8A\x89\x3\x2\x2"+
		"\x2\x8B\x8E\x3\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x34"+
		"\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2\a\x2mt\x84\x8C\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace CIV.Hml
